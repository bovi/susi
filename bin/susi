#!/usr/bin/env ruby

require 'susi'
require 'version'
require 'optparse'

def print_usage
  puts <<-EOF
Usage: 
  Init susi setting
  susi init

  Start VM from current folder 
  susi start

  Clean up disks
  susi rm

  Create a VM disk
  susi disk create <disk_name> <disk_size>

  Clone a VM disk
  susi disk clone <disk_name> <new_disk_name>

  Start a VM
  susi vm start <vm_name>

  Install a VM
  susi vm install <vm_name> <iso>

  Quit a VM
  susi vm quit <vm_name>

  List VMs
  susi ls
  susi vm ls

  Open VNC
  susi vnc
  susi vnc <vm_name>

  Open SSH
  susi ssh
  susi ssh <vm_name>

  Download Debian netinstall ISO
  susi iso download

susi (v#{Susi::VERSION}) - Simple User System Interface

author:  Daniel Bovensiepen
contact: oss@bovi.li
www:     https://github.com/bovi/susi
  EOF
  exit 1
end

options = {}
subcommands = %w[init start rm disk vm ls vnc ssh iso]

global = OptionParser.new do |opts|
  opts.banner = "Usage: susi [options] [subcommand [options]]"
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    print_usage
  end
end

subcommand = ARGV.shift
global.order!
print_usage if subcommand.nil?

case subcommand
when "init"
  Susi::init
when "start"
  Susi::start
when "rm"
  Susi::VM.quit(Susi::current_vm_name)
  Susi::rm
when "disk"
  disk_command = ARGV.shift
  case disk_command
  when "create"
    disk_name, disk_size = ARGV
    if disk_name && disk_size.to_i > 0
      Susi::Disk.create(disk_name, disk_size.to_i)
    else
      puts "Invalid disk create command"
      print_usage
    end
  when "clone"
    disk_name, new_disk_name = ARGV
    if disk_name && new_disk_name &&
        File.exist?("#{disk_name}.qcow2") &&
        !File.exist?("#{new_disk_name}.qcow2")
      Susi::Disk.clone(disk_name, new_disk_name)
    else
      puts "Invalid disk clone command"
      print_usage
    end
  else
    puts "Invalid disk command"
    print_usage
  end
when "vm"
  vm_command = ARGV.shift
  case vm_command
  when "start"
    vm_name = ARGV.shift
    if vm_name && File.exist?("#{vm_name}.qcow2")
      Susi::VM.start(vm_name, vm_name)
    else
      puts "Invalid vm start command"
      print_usage
    end
  when "install"
    vm_name, iso = ARGV
    if vm_name && File.exist?("#{vm_name}.qcow2") && iso && File.exist?(iso)
      Susi::VM.install(vm_name, vm_name, iso)
    else
      puts "Invalid vm install command"
      print_usage
    end
  when "quit"
    vm_name = ARGV.shift
    if vm_name
      Susi::VM.quit(vm_name)
    else
      puts "Invalid vm quit command"
      print_usage
    end
  when "ls"
    Susi::VM.ls
  else
    puts "Invalid vm command"
    print_usage
  end
when "ls"
  Susi::VM.ls
when "vnc"
  vm_name = ARGV.shift
  if vm_name
    Susi::VNC.open(vm_name)
  else
    Susi::VNC.open(Susi::current_vm_name)
  end
when "ssh"
  vm_name = ARGV.shift
  if vm_name
    Susi::SSH.open(vm_name)
  else
    Susi::SSH.open(Susi::current_vm_name)
  end
when "iso"
  iso_command = ARGV.shift
  if iso_command == "download"
    Susi::Disk.download_debian_netinstall
  else
    puts "Invalid iso command"
    print_usage
  end
else
  puts "Invalid command"
  print_usage
end
